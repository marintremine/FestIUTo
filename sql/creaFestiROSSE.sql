-- Generated by Mocodo 4.0.7

CREATE TABLE artiste (
  PRIMARY KEY (ida),
  ida        INT NOT NULL,
  noma       VARCHAR(50),
  prenoma    VARCHAR(50),
  dateNaissA DATE,
  idG        VARCHAR(42) NOT NULL
);

CREATE TABLE billet (
  PRIMARY KEY (idB),
  idB               INT NOT NULL,
  dateDebutValidite DATE,
  idTb              INT NOT NULL,
  idV               INT NOT NULL
);

CREATE TABLE etreSousStyle (
  PRIMARY KEY (idS_1, idS_2),
  idS_1 int NOT NULL,
  idS_2 int NOT NULL
);

CREATE TABLE evenement (
  PRIMARY KEY (idEv),
  idEv           int NOT NULL,
  typeEv         VARCHAR(80),
  descrEv        VARCHAR(200),
  tempsMontage   TIME,
  tempsDemontage TIME,
  gratuit        BOOLEAN,
  dateDebut      DATETIME,
  dateFin        DATETIME,
  idG            VARCHAR(42) NOT NULL,
  idL            int NOT NULL
);

CREATE TABLE favoris (
  PRIMARY KEY (idG, idV),
  idG VARCHAR(42) NOT NULL,
  idV INT NOT NULL
);

CREATE TABLE groupe (
  PRIMARY KEY (idG),
  idG          VARCHAR(42) NOT NULL,
  nomG         VARCHAR(42),
  descriptionG VARCHAR(42)
);

CREATE TABLE heberge (
  PRIMARY KEY (idG, idH),
  idG       VARCHAR(42) NOT NULL,
  idH       INT NOT NULL,
  dateDebut DATE,
  dateFin   DATE
);

CREATE TABLE hebergement (
  PRIMARY KEY (idH),
  idH            INT NOT NULL,
  nomHebergement VARCHAR(50),
  addresse       VARCHAR(200),
  nbPlaces       INT
);

CREATE TABLE instrument (
  PRIMARY KEY (idI),
  idI  INT NOT NULL,
  nomI VARCHAR(80)
);

CREATE TABLE jouer (
  PRIMARY KEY (idI, ida),
  idI INT NOT NULL,
  ida INT NOT NULL
);

CREATE TABLE lienrs (
  PRIMARY KEY (idG, idRs),
  idG       VARCHAR(42) NOT NULL,
  idRs      int NOT NULL,
  pos       int,
  pseudo    VARCHAR(80),
  urlReseau VARCHAR(200)
);

CREATE TABLE lieu (
  PRIMARY KEY (idL),
  idL      int NOT NULL,
  nomLieu  VARCHAR(80),
  nbPlaces int
);

CREATE TABLE photo (
  PRIMARY KEY (idPh),
  idPh  INT NOT NULL,
  urlPh VARCHAR(200),
  idG   VARCHAR(42) NOT NULL,
  pos   int
);

CREATE TABLE posseder (
  PRIMARY KEY (idG, idS),
  idG VARCHAR(42) NOT NULL,
  idS int NOT NULL
);

CREATE TABLE reseausocial (
  PRIMARY KEY (idRs),
  idRs          int NOT NULL,
  nomReseau     VARCHAR(50),
  urlLogoReseau VARCHAR(200)
);

CREATE TABLE sInscrit (
  PRIMARY KEY (idEv, idV),
  idEv int NOT NULL,
  idV  INT NOT NULL
);

CREATE TABLE style (
  PRIMARY KEY (idS),
  idS  int NOT NULL,
  nomS VARCHAR(280)
);

CREATE TABLE typebillet (
  PRIMARY KEY (idTb),
  idTb  INT NOT NULL,
  nomB  VARCHAR(50),
  prix  DECIMAl(5,2),
  duree INT
);

CREATE TABLE video (
  PRIMARY KEY (idVideo),
  idVideo  INT NOT NULL,
  urlVideo VARCHAR(200),
  idG      VARCHAR(42) NOT NULL,
  pos      int
);

CREATE TABLE visiteur (
  PRIMARY KEY (idV),
  idV        INT NOT NULL,
  nomV       VARCHAR(50),
  prenomV    VARCHAR(50),
  dateNaissV DATE,
  numtel     VARCHAR(12),
  email      VARCHAR(255),
  motdepasse VARCHAR(255),
  admin      BOOLEAN
);

ALTER TABLE artiste ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE billet ADD FOREIGN KEY (idV) REFERENCES visiteur (idV);
ALTER TABLE billet ADD FOREIGN KEY (idTb) REFERENCES typebillet (idTb);

ALTER TABLE etreSousStyle ADD FOREIGN KEY (idS_2) REFERENCES style (idS);
ALTER TABLE etreSousStyle ADD FOREIGN KEY (idS_1) REFERENCES style (idS);

ALTER TABLE evenement ADD FOREIGN KEY (idL) REFERENCES lieu (idL);
ALTER TABLE evenement ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE favoris ADD FOREIGN KEY (idV) REFERENCES visiteur (idV);
ALTER TABLE favoris ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE heberge ADD FOREIGN KEY (idH) REFERENCES hebergement (idH);
ALTER TABLE heberge ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE jouer ADD FOREIGN KEY (ida) REFERENCES artiste (ida);
ALTER TABLE jouer ADD FOREIGN KEY (idI) REFERENCES instrument (idI);

ALTER TABLE lienrs ADD FOREIGN KEY (idRs) REFERENCES reseausocial (idRs);
ALTER TABLE lienrs ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE photo ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE posseder ADD FOREIGN KEY (idS) REFERENCES style (idS);
ALTER TABLE posseder ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE sInscrit ADD FOREIGN KEY (idV) REFERENCES visiteur (idV);
ALTER TABLE sInscrit ADD FOREIGN KEY (idEv) REFERENCES evenement (idEv);

ALTER TABLE video ADD FOREIGN KEY (idG) REFERENCES groupe (idG);

ALTER TABLE evenement ADD CHECK (dateDebut < dateFin);
ALTER TABLE heberge ADD CHECK (dateDebut < dateFin);
ALTER TABLE typebillet ADD CHECK (prix > 0);
ALTER TABLE typebillet ADD CHECK (duree > 0);

DELIMITER |

CREATE OR REPLACE FUNCTION get_places_libres(idHe INT, dateDeb DATE, dateFin DATE) RETURNS INT
BEGIN
  DECLARE nbArtiste INT;
  DECLARE nbPl INT;
  SELECT COUNT(*) INTO nbArtiste FROM artiste WHERE idG in (SELECT idG FROM heberge WHERE idH = idH AND dateDebut BETWEEN dateDeb AND dateFin OR dateFin BETWEEN dateDeb AND dateFin);
  SELECT nbPlaces INTO nbPl FROM hebergement WHERE idH = idHe;
  RETURN nbPl-nbArtiste;
END|

-- Le nombre de place de l'hebergement doit être supérieur ou égale au nombre d'artiste du groupe

CREATE OR REPLACE TRIGGER hebergement_nbPlaces_artiste_ajout BEFORE INSERT ON heberge FOR EACH ROW
BEGIN
  DECLARE placesLibres INT;
  SELECT get_places_libres(new.idH, new.dateDebut, new.dateFin) INTO placesLibres;
  IF placesLibres < 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place de l''hebergement doit être supérieur ou égale au nombre d''artiste du groupe';
  END IF;
END|

CREATE OR REPLACE TRIGGER hebergement_nbPlaces_ajout_artiste_groupe BEFORE INSERT ON artiste FOR EACH ROW
BEGIN
  DECLARE idH INT;
  DECLARE nbPl INT;
  DECLARE dateDeb DATE;
  DECLARE dateFin DATE;
  DECLARE fini BOOLEAN DEFAULT FALSE;
  DECLARE lesReservations CURSOR FOR SELECT idH, nbPlaces, dateDebut, dateFin FROM heberge NATURAL JOIN hebergement WHERE idG = new.idG;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fini = TRUE;
  OPEN lesReservations;
  WHILE NOT fini DO
    FETCH lesReservations INTO idH, nbPl, dateDeb, dateFin;
    IF NOT fini AND get_places_libres(idH, dateDeb, dateFin) < 1 THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place de l''hebergement doit être supérieur ou égale au nombre d''artiste du groupe';
    END IF;
  END WHILE;
END|

-- Le nombre de place du lieu de l'evenement doit être supérieur ou égale au nombre de visiteur qui assiste à l'évenement

CREATE OR REPLACE TRIGGER lieu_nbPlaces_visiteur BEFORE INSERT ON evenement FOR EACH ROW
BEGIN
  DECLARE nbVisiteur INT;
  DECLARE nbPl INT;
  SELECT COUNT(*) INTO nbVisiteur FROM sInscrit WHERE idEv = new.idEv;
  SELECT nbPlaces INTO nbPl FROM lieu WHERE idL = new.idL;
  IF nbPl < nbVisiteur THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place du lieu de l''evenement doit être supérieur ou égale au nombre de visiteur qui assiste à l''évenement';
  END IF;
END|

CREATE OR REPLACE TRIGGER lieu_nbPlaces_visiteur_update BEFORE UPDATE ON evenement FOR EACH ROW
BEGIN
  DECLARE nbVisiteur INT;
  DECLARE nbPl INT;
  SELECT COUNT(*) INTO nbVisiteur FROM sInscrit WHERE idEv = new.idEv;
  SELECT nbPlaces INTO nbPl FROM lieu WHERE idL = new.idL;
  IF nbPl < nbVisiteur THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place du lieu de l''evenement doit être supérieur ou égale au nombre de visiteur qui assiste à l''évenement';
  END IF;
END|

CREATE OR REPLACE TRIGGER lieu_nbPlaces_ajout_visiteur_evenement BEFORE INSERT ON sInscrit FOR EACH ROW
BEGIN
  DECLARE nbVisiteur INT;
  DECLARE nbPl INT;
  SELECT COUNT(*) INTO nbVisiteur FROM sInscrit WHERE idEv = new.idEv;
  SELECT nbPlaces INTO nbPl FROM lieu WHERE idL = (SELECT idL FROM evenement WHERE idEv = new.idEv);
  IF nbPl < nbVisiteur THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place du lieu de l''evenement doit être supérieur ou égale au nombre de visiteur qui assiste à l''évenement';
  END IF;
END|

CREATE OR REPLACE TRIGGER lieu_nbPlaces_update_visiteur_evenement BEFORE UPDATE ON sInscrit FOR EACH ROW
BEGIN
  DECLARE nbVisiteur INT;
  DECLARE nbPl INT;
  SELECT COUNT(*) INTO nbVisiteur FROM sInscrit WHERE idEv = new.idEv;
  SELECT nbPlaces INTO nbPl FROM lieu WHERE idL = (SELECT idL FROM evenement WHERE idEv = new.idEv);
  IF nbPl < nbVisiteur THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le nombre de place du lieu de l''evenement doit être supérieur ou égale au nombre de visiteur qui assiste à l''évenement';
  END IF;
END|

-- Un groupe ne peux pas faire deux évenements au même dates 

CREATE OR REPLACE TRIGGER evenement_date_groupe BEFORE INSERT ON evenement FOR EACH ROW
BEGIN
  DECLARE nbEv INT;
  SELECT COUNT(*) INTO nbEv FROM evenement WHERE idG = new.idG AND (new.dateDebut BETWEEN dateDebut AND dateFin OR new.dateFin BETWEEN dateDebut AND dateFin);
  IF nbEv > 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Un groupe ne peux pas faire deux évenements au même dates';
  END IF;
END|

CREATE OR REPLACE TRIGGER evenement_date_update_groupe BEFORE UPDATE ON evenement FOR EACH ROW
BEGIN
  DECLARE nbEv INT;
  SELECT COUNT(*) INTO nbEv FROM evenement WHERE idG = new.idG AND (new.dateDebut BETWEEN dateDebut AND dateFin OR new.dateFin BETWEEN dateDebut AND dateFin);
  IF nbEv > 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Un groupe ne peux pas faire deux évenements au même dates';
  END IF;
END|

-- 2 évenements ne doivent pas se chevaucher s'ils ont le même lieu.

CREATE OR REPLACE TRIGGER evenement_date_lieu BEFORE INSERT ON evenement FOR EACH ROW
BEGIN
  DECLARE nbEv INT;
  SELECT COUNT(*) INTO nbEv FROM evenement WHERE idL = new.idL AND (new.dateDebut BETWEEN dateDebut AND dateFin OR new.dateFin BETWEEN dateDebut AND dateFin);
  IF nbEv > 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '2 évenements ne doivent pas se chevaucher s''ils ont le même lieu.';
  END IF;
END|

CREATE OR REPLACE TRIGGER evenement_date_update_lieu BEFORE UPDATE ON evenement FOR EACH ROW
BEGIN
  DECLARE nbEv INT;
  SELECT COUNT(*) INTO nbEv FROM evenement WHERE idL = new.idL AND (new.dateDebut BETWEEN dateDebut AND dateFin OR new.dateFin BETWEEN dateDebut AND dateFin);
  IF nbEv > 0 THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = '2 évenements ne doivent pas se chevaucher s''ils ont le même lieu.';
  END IF;
END|

-- Si l'evenement est payant, le visiteur doit avoir un billet valide le jour de l'evenement

CREATE OR REPLACE TRIGGER evenement_billet_ajout_visiteur BEFORE INSERT ON sInscrit FOR EACH ROW
BEGIN
  DECLARE nbBillet INT;
  DECLARE dateDeb DATE;
  DECLARE gratuit BOOLEAN;
  SELECT dateDebut INTO dateDeb FROM evenement WHERE idEv = new.idEv;
  SELECT gratuit INTO gratuit FROM evenement WHERE idEv = new.idEv;
  IF NOT gratuit THEN
    SELECT COUNT(*) INTO nbBillet FROM billet WHERE idV = new.idV AND dateDebutValidite <= dateDeb AND DATE_ADD(dateDebutValidite, INTERVAL duree DAY) >= dateDeb;
    iF nbBillet < 1 THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Si l''evenement est payant, le visiteur doit avoir un billet valide le jour de l''evenement';
    END IF;
  END IF;
END|

DELIMITER ;